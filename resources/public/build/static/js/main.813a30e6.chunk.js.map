{"version":3,"sources":["views/start/start.module.scss","contexts.js","sockets/socketProvider.js","views/start/start.js","components/leaveGame/leaveGame.js","components/playerEmojiUsername/playerEmojiUsername.js","components/question/question.js","components/gameStarted/gameStarted.js","components/questionPopUp/questionPopUp.js","components/score/score.js","components/showResults/showResults.js","views/gameScreen/gameScreen.js","hooks/usePlayer.js","components/chosingQuestions/choosingQuestions.js","components/playing/pick-question/pickQuestion.js","components/playing/answer-question/answerQuestion.js","components/playing/correct-answers/correctAnswers.js","components/playing/playing.js","views/gameController/gameController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameState","React","createContext","Questions","SocketContext","SocketProvider","props","useState","WebSocket","socket","setSocket","useEffect","onopen","console","log","sessionStorage","gameId","send","JSON","stringify","action","id","playerId","Provider","value","children","Start","useContext","gameState","setGameId","username","setUsername","history","useHistory","goTo","useCallback","path","push","getItem","handleInput","setFn","e","target","className","s","onClick","disabled","onSubmit","preventDefault","htmlFor","type","name","onChange","autoFocus","form","LeaveGame","setGameState","clear","close","PlayerEmojiUsername","style","color","textColor","player","emoji","score","fontSize","marginLeft","Question","turn","backgroundColor","question","focus","points","gameStarted","players","opacity","answered","GameStarted","animation","setAnimation","started","QuestionPopUp","activeQuestion","includes","replace","charAt","toUpperCase","slice","rephraseQuestion","Object","keys","filter","key","map","i","answers","role","aria-label","Score","setTimeout","ShowResults","results","GameScreen","setItem","document","getElementsByClassName","requestFullscreen","questions","usePlayer","setPlayer","ChoosingQuestions","qs","setQs","setPoints","qIndex","setQIndex","Array","from","Set","q","length","ready","pointsLeft","p","questionId","pickQuestion","PickQuestion","bool","setFocus","getPlayerFromQuestion","AnswerQuestion","answer","setAnswer","event","placeholder","CorrectAnswers","hasOwnProperty","correctAnswer","correct","Playing","focusableQuestions","flat","findIndex","resPlayer","PlayerScreen","readyState","match","params","maxLength","defaultValue","overflow","App","setQuestions","onmessage","data","parse","payload","exact","component","Boolean","window","location","hostname","render","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.813a30e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"start_root__nvgyY\",\"input-label\":\"start_input-label__1wIFV\"};","import React from 'react'\n\nexport const GameState = React.createContext();\nexport const Questions = React.createContext();","import React, {useState, useEffect, useContext} from \"react\";\nimport { GameState, Questions } from \"../contexts\";\n\nexport const SocketContext = React.createContext();\n\nconst SocketProvider = (props) => {\n  const [socket, setSocket] = useState(new WebSocket(\"ws://localhost:9090\"))\n  \n  // const { setGameState } = useContext(GameState);\n  // const { setQuestions } = useContext(Questions);\n  useEffect(() => {\n    socket.onopen = () => {\n      console.log(\"CONNECTED\")\n      if(sessionStorage.gameId) socket.send(JSON.stringify({action: \"GET_GAME_STATE\", id: sessionStorage.gameId}))\n      if(sessionStorage.playerId) socket.send(JSON.stringify({action: \"GET_GAME_STATE\", id: sessionStorage.playerId}))\n    } \n  });\n  // useEffect(() => {\n  //   if (socket) {\n  //     socket.onopen = () => {\n  //       socket.onmessage = ({data}) => {\n  //         console.log(\"returned data\", JSON.parse(data))\n  //         switch (JSON.parse(data).type) {\n  //           case \"GAME_STATE\":\n  //             console.log(\"RETURNED GAME STATE: \", JSON.parse(data).payload)\n  //             return setGameState(JSON.parse(data).payload);\n  //           case \"PLAYER_ID\":\n  //             return sessionStorage.setItem('playerId', JSON.parse(data).payload)\n  //           case \"QUESTIONS\":\n  //             return setQuestions(JSON.parse(data).payload);\n  //           default:\n  //             return;\n  //         }\n  //       }\n  //     }\n  //   }\n  // }, [socket, setGameState, setQuestions])\n\nreturn(\n  <SocketContext.Provider value={{socket, setSocket}}>\n    { props.children }\n  </SocketContext.Provider>\n  )\n}\nexport default SocketProvider;","import React, { useContext, useEffect, useState, useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Socket, GameState } from \"../../contexts\";\nimport { SocketContext } from \"../../sockets/socketProvider\";\nimport s from \"./start.module.scss\";\n\nconst Start = props => {\n  console.log(props);\n  const { socket } = useContext(SocketContext);\n  const { gameState } = useContext(GameState);\n  const [gameId, setGameId] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const history = useHistory();\n\n  const goTo = useCallback(path => history.push(path), [history]);\n\n  useEffect(() => {\n    if (gameState && sessionStorage.getItem(\"playerId\"))\n      return goTo(`game/${gameState.id}/${sessionStorage.getItem(\"playerId\")}`);\n    if (gameState) return goTo(`game/${gameState.id}`);\n  }, [gameState, goTo]);\n\n  const connectToGame = e => {\n    e.preventDefault();\n    socket.send(JSON.stringify({ action: \"JOIN_GAME\", id: gameId }));\n  };\n\n  const handleInput = setFn => e => setFn(e.target.value);\n\n  return (\n    <>\n      <div className={s[\"root\"]}>\n        <h1>Welcome</h1>\n        <button\n          onClick={() =>\n            socket.send(JSON.stringify({ action: \"CREATE_GAME\", id: null }))\n          }\n          disabled={!socket}\n        >\n          Create Game\n        </button>\n        <h2>Or Join a game</h2>\n        <form id=\"joinRoomForm\" onSubmit={connectToGame}>\n          <label className={s[\"input-label\"]} htmlFor=\"room-code\">\n            Enter room code\n            <input\n              type=\"text\"\n              name=\"room-code\"\n              onChange={handleInput(setGameId)}\n              value={gameId}\n              autoFocus\n            ></input>\n          </label>\n          <label className={s[\"input-label\"]} htmlFor=\"username\">\n            Username\n            <input\n              type=\"text\"\n              name=\"username\"\n              onChange={handleInput(setUsername)}\n              value={username}\n              autoFocus\n            ></input>\n          </label>\n        </form>\n        <br />\n        <button type={\"submit\"} form={\"joinRoomForm\"}>\n          Join game\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Start;\n","import React, {useContext} from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport './leaveGame.scss'\nimport { Socket, GameState } from '../../contexts'\nimport { SocketContext } from '../../sockets/socketProvider';\n\nconst LeaveGame = () => {\n  const { socket } = useContext(SocketContext)\n  const { setGameState } = useContext(GameState)\n  const history = useHistory();\n\n  const onLeave = () => {\n    setGameState(null);\n    sessionStorage.clear();\n    socket.close();\n    history.push('/');\n  }\n\n  return (\n    <div className=\"leave-game\">\n      <button onClick={onLeave}>Leave game</button>\n    </div>\n  )\n}\n\nexport default LeaveGame;","import React from \"react\";\nimport './playerEmojiUsername.scss'\n\nconst PlayerEmojiUsername = (props) => {\n  return (<p style={{color: `${props.textColor}`}}>\n    <span>{props.player.emoji}</span>\n    {props.player.username} \n    {props.score && <span style={{\n      color: '#000',\n      fontSize: '2rem',\n      marginLeft: '20px',\n      }}>\n      score: {props.score}\n    </span>}\n  </p>)\n}\n\nexport default PlayerEmojiUsername;","import React, {useContext} from 'react';\nimport './question.scss';\nimport { GameState } from '../../contexts';\n\nconst Question = (props) => {\n  const { gameState } = useContext(GameState);\n  \n  return (<>{gameState &&\n    <> {gameState.turn === sessionStorage.playerId\n      ? <div className={`question`}\n          style={{backgroundColor: `${props.question.focus && props.player.color}`}}>\n          {props.question.points}\n        </div>\n      : <div className={`\n        question \n        ${gameState.turn === props.question.playerId && gameState.gameStarted ? 'disabled' : ''} \n        ${props.question.focus && props.player.id !== gameState.turn ? 'focused' : ''}`} \n          style={{\n            backgroundColor: `${props.question.focus ? gameState.players[gameState.turn].color : '#ffffff'}`,\n            ...props.style,\n            opacity: `${props.question.answered ? '0' : '1'}`,\n            }}>\n          {props.question.points}\n          <span>{props.question.focus ? gameState.players[gameState.turn].emoji : ''}</span>\n        </div>}\n    </>}\n  </>)\n}\n\nexport default Question;","import React, {useEffect, useState} from 'react'\nimport './gameStarted.scss'\n\nconst GameStarted = (props) => {\n  const [animation, setAnimation] = useState('');\n\n  useEffect(() => {\n    if (props.started) {\n      setAnimation('start-animation')\n    }\n  }, [props.started, setAnimation])\n\n  return (<div className={'game-started'}>\n    <h1 className={animation}>GAME STARTED</h1>\n  </div>)\n}\n\nexport default GameStarted;","import React, { useContext} from 'react';\nimport './questionPopUp.scss';\nimport { GameState } from '../../contexts';\nimport PlayerEmojiUsername from '../playerEmojiUsername/playerEmojiUsername';\n\nconst QuestionPopUp = () => {\n  const { gameState } = useContext(GameState)\n\n  const rephraseQuestion = (question) => {\n    if(question.question.includes('your')) {\n      return question.question.replace('your', `${gameState.players[question.playerId].username.charAt(0).toUpperCase() + gameState.players[question.playerId].username.slice(1)}'s`)\n    }\n    if(question.question.includes('you')) {\n      return question.question.replace('you', `${gameState.players[question.playerId].username.charAt(0).toUpperCase() + gameState.players[question.playerId].username.slice(1)}`)\n    }\n  }\n  \n  return (<div className={'wrapper'}>{\n    console.log(gameState.activeQuestion)}\n    {gameState && gameState.activeQuestion &&\n    <div className={'question-pop-up'} style={{backgroundColor: `${gameState.players[gameState.activeQuestion.playerId].color}`}}>\n      <span>{gameState.players[gameState.activeQuestion.playerId].emoji}</span>\n      <h1>\n        {rephraseQuestion(gameState.activeQuestion)}\n      </h1>\n      <section>\n        {Object.keys(gameState.players)\n          .filter(key => key !== gameState.activeQuestion.playerId)\n          .map((key, i) => {\n            return <>\n              {!Object.keys(gameState.activeQuestion.answers).includes(gameState.players[key].id) && <span role={'img'} aria-label={'hourglass'}>⏳</span>}\n              <PlayerEmojiUsername player={gameState.players[key]} key={i + 'name'}/>\n            </>\n          })}\n      </section>\n    </div>\n  }</div>)\n}\n\nexport default QuestionPopUp;","import React, { useEffect, useState, useRef } from 'react';\nimport './score.scss';\nimport { timeout } from 'q';\n\nconst Score = (props) => {\n  //const [speed, setSpeed] = useState(1000);\n  const [ ones, setOnes ] = useState(0);\n  const [animation, setAnimation] = useState('')\n  //const digits = [0,1,2,3,4,5,6,7,8,9]\n\n\n  useEffect(() => {\n    //setAnimation(() => 'move-under')\n    setAnimation(() => 'roll-up')\n    setTimeout(() => setAnimation(''), 1000)\n    /* TODO: Make every number rotate */\n    // const diff = Math.abs(ones - props.score);\n    // const interval = setInterval(() => {\n    //   setAnimation(() => '')\n    //   setAnimation(() => 'roll-up')\n    //   setOnes(ones => ones + 1)\n    // }, 1000, ones)\n    // setTimeout(() => clearInterval(interval), diff*speed)\n  }, [props.score])\n\n  return (\n    <div className={'score'}>\n      <h1 className={animation}>{props.score}</h1>\n    </div>\n  )\n}\n\nexport default Score;","import React, { useContext} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { GameState } from '../../contexts';\nimport PlayerEmojiUsername from '../playerEmojiUsername/playerEmojiUsername';\nimport './showResults.scss';\nimport { SocketContext } from '../../sockets/socketProvider';\n\nconst ShowResults = () => {\n  const history = useHistory();\n  const { socket } = useContext(SocketContext)\n  const { setGameState } = useContext(GameState)\n  const { gameState } = useContext(GameState)\n  \n  return (<div className={'wrapper'}>\n      <div className={'result-pop-up'}>\n        <h1>RESULTS:</h1>\n        {gameState.results.map((player) => {\n          return (<>\n            <PlayerEmojiUsername \n              key={player.id} \n              score={player.points}\n              player={player} \n              textColor={player.color}/>\n          </>)\n        })}\n        <button onClick={() => {\n          sessionStorage.clear()\n          history.push('/')\n          setGameState(null);\n          socket.close();\n        }}>Quit game</button>\n      </div>\n  }</div>)\n}\n\nexport default ShowResults;","import React,{ useContext, useEffect } from 'react';\nimport { GameState } from '../../contexts';\nimport LeaveGame from '../../components/leaveGame/leaveGame';\nimport PlayerEmojiUsername from '../../components/playerEmojiUsername/playerEmojiUsername';\nimport Question from '../../components/question/question';\nimport './gameScreen.scss';\nimport GameStarted from '../../components/gameStarted/gameStarted';\nimport QuestionPopUp from '../../components/questionPopUp/questionPopUp';\nimport Score from '../../components/score/score';\nimport ShowResults from '../../components/showResults/showResults';\n\nfunction GameScreen(props) {\n  console.log(props);\n  const { gameState } = useContext(GameState);\n\n  useEffect(() => {\n    if (gameState) sessionStorage.setItem('gameId', gameState.id)\n  }, [gameState])\n\n  const fullScreen = () => {\n    document.getElementsByClassName(\"game-screen\")[0].requestFullscreen();\n  }\n\n  return (<>{ gameState \n    ? <div className={\"game-screen\"}>\n        <GameStarted started={gameState.gameStarted}/>\n        {gameState.results && <ShowResults></ShowResults>}\n        <header>\n          <h1> \n            <LeaveGame/>\n          </h1>\n          <h3>Game code: {gameState.id}</h3>\n          <button onClick={fullScreen}>fullscreen</button>\n        </header>\n        <main>\n          { gameState.activeQuestion && <QuestionPopUp/>}\n          {Object.keys(gameState.players).map((key, i) => {\n            const player = gameState.players[key];\n            return (\n              <section style={{backgroundColor: player.color}} key={player.color}>\n                <div className={'question-wrapper'}>\n                  {Object.keys(player.questions)\n                  .map((key) => {\n                    return <Question\n                      question={player.questions[key]} \n                      player={player} \n                      key={player.questions[key].question}>\n                    </Question>\n                  })}\n                </div>\n                <PlayerEmojiUsername player={player}/>\n                <Score score={player.points}></Score>\n              </section>\n            )\n          })}\n        </main>\n      </div>\n      : <p>Loading game...</p>\n  }\n    <pre>{ JSON.stringify(gameState, null, \"  \") }</pre>\n  </>);\n}\n\nexport default GameScreen;\n","import {useState, useContext, useEffect} from 'react'\nimport { GameState } from '../contexts'\n\nconst usePlayer = () => {\n  const {gameState} = useContext(GameState)\n  const [player, setPlayer] = useState();\n\n  useEffect(() => {\n    if (gameState) {\n      setPlayer(gameState.players[sessionStorage.playerId])\n    }\n  }, [gameState])\n\n  return { player }\n}\n\nexport default usePlayer;","import React, {useEffect, useContext, useState} from 'react'\nimport './choosingQuestions.scss'\nimport { Socket, Questions, GameState } from '../../contexts'\nimport usePlayer from '../../hooks/usePlayer';\nimport { SocketContext } from '../../sockets/socketProvider';\n\nconst ChoosingQuestions = (props) => {\n  const { questions } = useContext(Questions);\n  const { gameState } = useContext(GameState);\n  const [ qs, setQs ] = useState(null);\n  const { player } = usePlayer();\n  const [ points, setPoints ] = useState(null);\n  const [ qIndex, setQIndex ] = useState(0);\n\n  const { socket } = useContext(SocketContext)\n\n  useEffect(() => {\n    if(socket) socket.send(JSON.stringify({action: \"GET_QUESTIONS\"}))\n  }, [socket])\n\n  useEffect(() => {\n    if(questions) {\n      if(!points) setPoints(Array.from(new Set(questions.map(q => q.points))))\n      setQs(questions.filter(q => q.points === (!points ? Array.from(new Set(questions.map(q => q.points))) : points)[0]))\n    }\n  },[questions, points]);\n\n  const pickQuestion = (question) => {\n    const pointsLeft = points.filter(p => p !== question.points)\n    setPoints(pointsLeft)\n    socket.send(JSON.stringify({\n      action: \"ADD_QUESTION\", \n      id: gameState.id,\n      playerId: player.id,\n      questionId: question.id, \n    }))\n    if (pointsLeft.length === 0) socket.send(JSON.stringify({\n      action: \"SET_PLAYER_READY\",\n      id: gameState.id,\n      playerId: player.id,\n      ready: true,\n    }))\n  };\n\n  return (<>\n    {qs ? <main>\n        {qs.length > 0 \n          ? <>\n            <h2>For {qs[qIndex].points} points</h2>\n            <h1>{qs[qIndex].question}</h1>\n          </>\n          : <>\n            <h1>{props.ready && 'You are ready ⭐️'}</h1>\n            <h2>Waiting for ⏳<br/>{Object.keys(gameState.players).map(key => {\n              const player = gameState.players[key];\n              return !player.ready && <span key={player.id}>{player.emoji}</span>\n            })}</h2>\n        </>}      \n      </main>\n    : <p>⏳</p>}\n    <footer>\n      {player && !player.ready && <>\n        <button onClick={() => setQIndex((qIndex + 1) % qs.length)}>\n          <span role=\"img\" aria-label=\"reject\">❌</span>\n        </button>\n        <button onClick={() => {\n          setQIndex(0)\n          pickQuestion(qs[qIndex])\n        }}>\n          <span role=\"img\" aria-label=\"accept\">✅</span>\n        </button>\n      </>}\n    </footer>\n  </>)\n}\n\nexport default ChoosingQuestions;","import React, {useContext, useState, useEffect} from 'react'\nimport { GameState } from '../../../contexts';\nimport Question from '../../question/question';\nimport { SocketContext } from '../../../sockets/socketProvider';\nimport './pickQuestion.scss'\n\nconst PickQuestion = (props) => {\n  const { player } = props;\n  const { gameState } = useContext(GameState);\n  const { socket } = useContext(SocketContext)\n  const [ qIndex, setQIndex ] = useState(0)\n  console.log('QUESTIONS TO PICK: ', props.questions)\n\n  const setFocus = (qIndex) => {\n    socket.send(JSON.stringify({\n      action: \"SET_FOCUS\", \n      id: gameState.id,\n      playerId: props.questions[qIndex].playerId,\n      questionId: props.questions[qIndex].id,\n      bool: true,\n    }))\n  }\n\n  useEffect(() => {\n    setFocus(qIndex)\n  }, [qIndex])\n\n  const getPlayerFromQuestion = (question) => question && gameState.players[question.playerId]\n\n  const pickQuestion = () => {\n    socket.send(JSON.stringify({\n      action: \"SET_ACTIVE_QUESTION\",\n      id: gameState.id,\n      question: props.questions[qIndex],\n    }))\n  }\n\n  return (<>{gameState && player && <>\n    <main>\n      <h1>Your turn to pick a question!</h1>\n      <div className=\"question\">\n        <button onClick={() => setQIndex((qIndex - 1) < 0 ? ((qIndex - 1) % props.questions.length) + props.questions.length : ((qIndex - 1) % props.questions.length))}>{'<'}</button>\n        <span>{getPlayerFromQuestion(props.questions[qIndex]).emoji}</span>\n        <Question question={props.questions[qIndex]} player={getPlayerFromQuestion(props.questions[qIndex])}/>\n        <button onClick={() => setQIndex((qIndex + 1) % props.questions.length)}>{'>'}</button>\n      </div>\n    </main>\n    <footer>\n      <button onClick={pickQuestion}>\n        <span role=\"img\" aria-label=\"reject\">✅</span>\n      </button>\n    </footer>\n </>}</>)\n}\n\nexport default PickQuestion;","import React, {useContext, useState} from 'react'\nimport { GameState, Socket } from '../../../contexts';\nimport usePlayer from '../../../hooks/usePlayer';\nimport './answerQuestion.scss'\nimport { SocketContext } from '../../../sockets/socketProvider';\n\nconst AnswerQuestion = () => {\n  const { gameState } = useContext(GameState);\n  const { socket } = useContext(SocketContext)\n  const [answer, setAnswer] = useState(' ')\n\n  const submitAnswer = (event) => {\n    event.preventDefault()\n    socket.send(JSON.stringify({\n      action: \"ANSWER\",\n      id: gameState.id,\n      playerId: sessionStorage.playerId,\n      answer,\n    }))\n    setAnswer(null)\n  }\n\n  return (<>\n    {answer \n    ? <main>\n        <h1>Time to answer, good luck!</h1>\n        <form onSubmit={submitAnswer} id=\"answerForm\">\n          <textarea placeholder={'Type your answer here'} onChange={(e) => setAnswer(e.target.value)} />\n        </form>\n      </main>\n    : <main>\n        <h1>Waiting for {gameState.players[gameState.activeQuestion.playerId].emoji} to correct the answers</h1>\n      </main>\n    }\n    <footer>\n      {answer ? <button type=\"submit\" form=\"answerForm\" value=\"Submit\">Submit Answer</button> : <></>}\n    </footer>\n  </>)\n}\n\nexport default AnswerQuestion;","import React, {useContext, useState, useEffect} from 'react'\nimport './correctAnswers.scss'\nimport { GameState, Socket } from '../../../contexts';\nimport { SocketContext } from '../../../sockets/socketProvider';\n\nconst CorrectAnswers = () => {\n  const { gameState } = useContext(GameState);\n  const { socket } = useContext(SocketContext)\n  const [answer, setAnswer] = useState(false)\n\n  useEffect(() => {\n    if (Object.keys(gameState.activeQuestion.answers).length > 0) {\n      setAnswer(Object.keys(gameState.activeQuestion.answers)\n        .filter(key => !gameState.activeQuestion.answers[key].hasOwnProperty('correct'))\n        .map(key => gameState.activeQuestion.answers[key])[0])\n    } \n  }, [gameState])\n\n  const correctAnswer = (event, bool) => {\n    event.preventDefault()\n    socket.send(JSON.stringify({\n      action: \"CORRECT_ANSWER\",\n      id: gameState.id,\n      playerId: answer.playerId,\n      correct: bool,\n    }))\n  }\n\n  return (<>\n    <main>\n      <h1>This is your question! Answers will come in soon, stay ready!</h1>\n      <p>\n        {answer && answer.answer}\n      </p>\n    </main>\n    <footer>\n      <button onClick={(e) => correctAnswer(e, false)}>\n        <span role=\"img\" aria-label=\"reject\">❌</span>\n      </button>\n      <button onClick={(e) => correctAnswer(e, true)}>\n        <span role=\"img\" aria-label=\"accept\">✅</span>\n      </button>\n    </footer>\n    \n  </>)\n}\n\nexport default CorrectAnswers;","import React, {useContext} from 'react'\nimport PickQuestion from './pick-question/pickQuestion';\nimport AnswerQuestion from './answer-question/answerQuestion';\nimport CorrectAnswers from './correct-answers/correctAnswers';\nimport { GameState } from '../../contexts';\nimport usePlayer from '../../hooks/usePlayer';\nimport './playing.scss'\n\nconst Playing = () => {\n  const { gameState } = useContext(GameState);\n  const { player } = usePlayer();\n\n  const getPlayersQuestions = (playerId) => Object.keys(gameState.players[playerId].questions).map(key => gameState.players[playerId].questions[key])\n\n  const focusableQuestions = () => (Object.keys(gameState.players)\n    .filter(key => player && gameState.players[key].id !== player.id)\n    .map(key => getPlayersQuestions(key))\n    .flat()\n    .filter(q => !q.answered))\n\n  return (<>{ gameState && player && \n    !gameState.activeQuestion\n      ? <>{gameState.turn === player.id && focusableQuestions().length > 0\n            ? <PickQuestion questions={focusableQuestions()} player={player}/>\n            : <>{ !gameState.results \n              ? <>\n                  <h1>⏳<br/>Waiting for <span>{gameState.players[gameState.turn].emoji} to pick a question</span></h1>\n                  <footer></footer></>\n              : <p>Game has ended your score was: {player.points}, and you got the {gameState.results.findIndex(resPlayer => resPlayer.id === player.id) + 1} place!</p>}\n              </>}\n        </>\n      : <>{\n            gameState.activeQuestion && gameState.activeQuestion.playerId === player.id\n              ? <CorrectAnswers/>\n              : <>{ gameState.activeQuestion && <AnswerQuestion/>}</>\n          }\n        </>}\n  </>)\n}\n\nexport default Playing;","import React,{ useContext, useEffect } from 'react';\nimport { GameState } from '../../contexts';\nimport LeaveGame from '../../components/leaveGame/leaveGame';\nimport './gameController.scss';\nimport ChoosingQuestions from '../../components/chosingQuestions/choosingQuestions';\nimport Playing from '../../components/playing/playing';\nimport usePlayer from '../../hooks/usePlayer';\nimport { SocketContext } from '../../sockets/socketProvider';\n\nfunction PlayerScreen(props) {\n  const { gameState } = useContext(GameState);\n  const { socket, setSocket } = useContext(SocketContext)\n  const { player } = usePlayer();\n\n  useEffect(() => {\n    if (socket.readyState === 1) socket.send(JSON.stringify({action: \"GET_GAME_STATE\", id: props.match.params.id, playerId: props.match.params.playerId}))\n  }, [socket, socket.readyState, props.match.params.id, props.match.params.playerId])\n\n  const sendUsername = (username) => {\n    socket.send(JSON.stringify({\n      action: \"SET_USERNAME\", \n      id: gameState.id,\n      playerId: player.id,\n      username,\n    }))\n  }\n\n  return (<>{\n    player && sessionStorage.getItem('playerId') \n      ? <div className=\"game-controller\">\n          <header style={{backgroundColor: player.color || '#fff'}}>\n            <h2>\n              <span>{gameState.name}</span>\n              <LeaveGame />\n              <span>\n                Game Id: {gameState.id}\n              </span>\n            </h2>\n              <span>\n                {player.emoji}\n                <input \n                  type=\"text\" \n                  onChange={(e) => sendUsername(e.target.value)} \n                  placeholder={player.username || 'Username'}\n                  maxLength=\"20\"\n                  defaultValue={player.username || 'Username'}\n                  autoFocus/>\n              </span>\n          </header>\n          {!gameState.gameStarted\n            ? <ChoosingQuestions/>\n            : <Playing/>\n          }\n        </div>\n      : <p>Loading or you are not a player in this game...</p>}\n    <pre style={{overflow: 'auto'}}>{ JSON.stringify(gameState, null, \"  \") }</pre>\n  </>);\n}\n\nexport default PlayerScreen;\n","import React,{useEffect, useState, useContext}  from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { \n  Socket,\n  GameState,\n  Questions,\n } from './contexts'\nimport './App.css';\nimport Start from './views/start/start';\nimport GameScreen from './views/gameScreen/gameScreen';\nimport PlayerScreen from './views/gameController/gameController';\nimport { SocketContext } from './sockets/socketProvider';\n\nfunction App() {\n  //const [socket, setSocket] = useState()\n  const { socket } = useContext(SocketContext)\n  const [gameState, setGameState] = useState()\n  const [questions, setQuestions] = useState()\n\n  useEffect(() => {\n    if (socket) {\n      \n        socket.onmessage = ({data}) => {\n          switch (JSON.parse(data).type) {\n            case \"GAME_STATE\":\n              return setGameState(JSON.parse(data).payload);\n            case \"PLAYER_ID\":\n              return sessionStorage.setItem('playerId', JSON.parse(data).payload)\n            case \"GAME_IN_PROGRESS\":\n              return setGameState(JSON.parse(data).payload);\n            case \"QUESTIONS\":\n              return setQuestions(JSON.parse(data).payload);\n            default:\n              return;\n          }\n        }\n      }\n    \n  }, [socket, setGameState, setQuestions])\n\n  // useEffect(() => {\n  //   if (!socket) {\n  //     const s = new WebSocket(\"ws://localhost:9000\")\n  //     s.onopen = () => {\n  //       s.onmessage = ({data}) => {\n  //         console.log(\"returned data\", JSON.parse(data))\n  //         switch (JSON.parse(data).type) {\n  //           case \"GAME_STATE\":\n  //             console.log(\"RETURNED GAME STATE: \", JSON.parse(data).payload)\n  //             return setGameState(JSON.parse(data).payload);\n  //           case \"PLAYER_ID\":\n  //             return sessionStorage.setItem('playerId', JSON.parse(data).payload)\n  //           case \"QUESTIONS\":\n  //             return setQuestions(JSON.parse(data).payload);\n  //           default:\n  //             return;\n  //         }\n  //       }\n  //       setSocket(s)\n  //     }\n  //   }\n  // })\n\n  useEffect(() => {\n    console.log(\"GAME STATE UPDATED: \", gameState)\n  }, [gameState])\n\n  // useEffect(() => {\n  //   if(socket) {\n  //     socket.onmessage = ({data}) => {\n  //       console.log(\"returned data\", JSON.parse(data))\n  //       switch (JSON.parse(data).type) {\n  //         case \"GAME_STATE\":\n  //           console.log(\"RETURNED GAME STATE: \", JSON.parse(data).payload)\n  //           return setGameState(JSON.parse(data).payload);\n  //         case \"PLAYER_ID\":\n  //           return sessionStorage.setItem('playerId', JSON.parse(data).payload)\n  //         case \"QUESTIONS\":\n  //           return setQuestions(JSON.parse(data).payload);\n  //         default:\n  //           return;\n  //       }\n  //     }\n  //   }\n  // }, [socket])\n\n  return (\n    //<Socket.Provider value={{socket, setSocket}}>\n      <Router>\n        <GameState.Provider value={{gameState, setGameState}}>  \n          <Route exact path=\"/\" component={Start} />\n          <Questions.Provider value={{questions, setQuestions}}>\n            <Route exact path=\"/game/:id\" component={GameScreen} />\n            <Route exact path=\"/game/:id/:playerId\" component={PlayerScreen} />\n          </Questions.Provider>\n        </GameState.Provider>\n      </Router>      \n    //</Socket.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport SocketProvider from './sockets/socketProvider';\n\n\n\nconst renderApp = App => {\n  render(\n    <SocketProvider>\n      <App/>\n    </SocketProvider>,\n    document.getElementById(\"root\")\n  );\n}\n\nrenderApp(App);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}